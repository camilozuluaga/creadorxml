/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package xml;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.mozilla.universalchardet.UniversalDetector;

/**
 *
 * @author jucazuse
 */
public class Interfaz extends javax.swing.JFrame {
    /*variable para el metodo de abrir el archivo*/
    JFileChooser elegirImagen;
    int aprovoSeleccion;
    int reprovoSeleccion;
    int seleccion;
    String ruta;
    File file;
    FileNameExtensionFilter filtro;
    /*fin de variables para el metodo abrir*/
    
    /*variables para el metodo cargar tabla*/
    Scanner scan;
    String siguienteLinea;
    String[]metadata;
    String[]registrosArchivo;
    DefaultTableModel modeloTabla;
    String encoding;
    /*fin de variables para el metodo cargar Tabla*/
    
    /*Variables para el metodo separador elegido*/
    String separador;
    /*fin de variables para el metodo separador*/
    
    
    /*Variables para el metodo generar archivo*/
    int contador;
    String version;
    String codificacion;
    String primeraLinea;
    String segundaLinea;
    String terceraLinea;
    String columnas;
    String cuartaLinea;
    String datos;
    String datosGenerales;
    String datoSinComilla;
    File rutaArchivoCreado;
    FileWriter crearArchivo=null;
    PrintWriter escribirLineas=null;
    String directorio=System.getProperty("user.dir");
    String separadorArchivo=System.getProperty("file.separator");
    String nombreArchivo="archivoGenerado.xml";
    String finOpenerp;
    String finData;
    String finRecord;
    String metadataSinComillas;
    /*fin de variables para el metodo generar archivo*/
    /**
     * Creates new form Interfaz
     */
    public Interfaz() {
        initComponents();
        txtUrlArchivo.setEditable(false);
        lbMensaje.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btgSeparador = new javax.swing.ButtonGroup();
        txtUrlArchivo = new javax.swing.JTextField();
        btnCargarArchivo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTRegistros = new javax.swing.JTable();
        btnGenerarArchivo = new javax.swing.JButton();
        lbMensaje = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        rbPuntoComa = new javax.swing.JRadioButton();
        rbComa = new javax.swing.JRadioButton();
        btnVisualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnCargarArchivo.setText("Cargar Archivo ");
        btnCargarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarArchivoActionPerformed(evt);
            }
        });

        jTRegistros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(jTRegistros);

        btnGenerarArchivo.setText("Generar Archivo .XML");
        btnGenerarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarArchivoActionPerformed(evt);
            }
        });

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Separador de Archivo", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 153)));

        btgSeparador.add(rbPuntoComa);
        rbPuntoComa.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbPuntoComa.setText(";");
        rbPuntoComa.setBounds(20, 20, 40, 25);
        jLayeredPane1.add(rbPuntoComa, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btgSeparador.add(rbComa);
        rbComa.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        rbComa.setText(",");
        rbComa.setBounds(110, 20, 40, 25);
        jLayeredPane1.add(rbComa, javax.swing.JLayeredPane.DEFAULT_LAYER);

        btnVisualizar.setText("Visualizar el Archivo ");
        btnVisualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVisualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(106, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtUrlArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnCargarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(btnGenerarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(lbMensaje, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE)))
                            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnVisualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(253, 253, 253))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnCargarArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(txtUrlArchivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnVisualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerarArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCargarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarArchivoActionPerformed
       cargarArchivo();
    }//GEN-LAST:event_btnCargarArchivoActionPerformed

    private void btnVisualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVisualizarActionPerformed
        separadorElegido();
        cargarTabla();
        
    }//GEN-LAST:event_btnVisualizarActionPerformed

    private void btnGenerarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarArchivoActionPerformed
        generarArchivo();
        
    }//GEN-LAST:event_btnGenerarArchivoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btgSeparador;
    private javax.swing.JButton btnCargarArchivo;
    private javax.swing.JButton btnGenerarArchivo;
    private javax.swing.JButton btnVisualizar;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTRegistros;
    private javax.swing.JLabel lbMensaje;
    private javax.swing.JRadioButton rbComa;
    private javax.swing.JRadioButton rbPuntoComa;
    private javax.swing.JTextField txtUrlArchivo;
    // End of variables declaration//GEN-END:variables

    
    /*Este metodo es el que nos carga el archivo seleccionado
     por el usuario*/
    public void cargarArchivo() {
        elegirImagen = new JFileChooser();
        filtro = new FileNameExtensionFilter("TXT", "TXT");
        elegirImagen.setFileFilter(filtro);
        seleccion = elegirImagen.showOpenDialog(this);
        if (seleccion == JFileChooser.APPROVE_OPTION) {
            file = elegirImagen.getSelectedFile();
            ruta = String.valueOf(file);
            txtUrlArchivo.setText(ruta);
        } else {
            JOptionPane.showMessageDialog(this, "Señor Usuario por favor Elija un Archivo", "Mesaje de Informacion", JOptionPane.INFORMATION_MESSAGE);
        }

    }
    
    /*este metodo nos sirve para saber que separador fue el 
     que el usuario eligio. y en base a ese separador porder
     cortar el archivo.*/
    public String separadorElegido() {
        if (rbPuntoComa.isSelected()) {
            separador = ";";
        } else if (rbComa.isSelected()) {
            separador = ",";
        }
        return separador;
    }

    /*este metodo carga la tabla. partiendo del achivo plano 
     que el usuario elija*/
    public void cargarTabla() {
        file = new File(ruta);
        modeloTabla = (DefaultTableModel) jTRegistros.getModel();
        try {
            scan = new Scanner(file, detector());
            if (ruta.equals(ruta)) {
                limpiarTabla();
                if (scan.hasNextLine()) {
                    siguienteLinea = scan.nextLine();
                    metadata = siguienteLinea.split(separadorElegido());
                    for (int i = 0; i < metadata.length; i++) {
                        modeloTabla.addColumn(metadata[i]);
                    }
                }
            }
            while (scan.hasNextLine()) {
                siguienteLinea = scan.nextLine();
                registrosArchivo = siguienteLinea.split(separadorElegido());
                modeloTabla.addRow(registrosArchivo);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void generarArchivo() {
        rutaArchivoCreado = new File(String.format("%s%s%s", directorio, separadorArchivo, nombreArchivo));
        try {
            crearArchivo = new FileWriter(rutaArchivoCreado, true);
            escribirLineas = new PrintWriter(rutaArchivoCreado);
            contador =1;
            version = "\"1.0\"";
            codificacion = "\"utf-8\"";
            primeraLinea = String.format("<?xml version=%s encoding=%s?>", version, codificacion);
            escribirLineas.println(primeraLinea);
            System.out.println(primeraLinea);
            segundaLinea = "<openerp>";
            escribirLineas.println(segundaLinea);
            System.out.println(segundaLinea);
            terceraLinea = "\t<data noupdate=\"1\">";
            escribirLineas.println(terceraLinea);
            System.out.println(terceraLinea);
            file = new File(ruta);
            try {
                scan = new Scanner(file, detector());
                if (scan.hasNextLine()) {
                    siguienteLinea = scan.nextLine();
                    metadata = siguienteLinea.split(separadorElegido());
                    for (int i = 0; i < metadata.length; i++) {
                        columnas = metadata[i];
                    }
                    while (scan.hasNextLine()) {
                        cuartaLinea = String.format("\t\t<record model=\"delphos.generales_tipoidentificacion\" id=\"tipo_id_%s\">", contador);
                        System.out.println(cuartaLinea);
                        escribirLineas.println(cuartaLinea);
                        siguienteLinea = scan.nextLine();
                        registrosArchivo = siguienteLinea.split(separadorElegido());
                        for (int j = 0; j < registrosArchivo.length; j++) {
                            datos = registrosArchivo[j];
                            metadataSinComillas=metadata[j].replace("\"", "");
                            datoSinComilla = datos.replace("\"", "");
                            datosGenerales = String.format("\t\t\t<field name=\"%s\">%s</field>",metadataSinComillas,datoSinComilla);
                            System.out.println(datosGenerales);
                            escribirLineas.println(datosGenerales);
                        }
                        finRecord="\t\t</record>";
                        escribirLineas.println(finRecord);
                        System.out.println("\t\t</record>");
                        contador++;
                    }
                    System.out.println("\t</data>");
                    finData="\t</data>";
                    escribirLineas.println(finData);
                    finOpenerp="</openerp>";
                    escribirLineas.println(finOpenerp);
                    System.out.println("</openerp>");
                    escribirLineas.close();
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            Logger.getLogger(Interfaz.class.getName()).log(Level.SEVERE, null, ex);
        }


    }
    
    
    public void limpiarTabla() {
        if (ruta.equals(ruta)) {
            modeloTabla.setColumnCount(0);
            modeloTabla.setRowCount(0);
        }

    }
    
    
    
    public String detector() {
        try {
            file = new File(ruta);
            final FileInputStream fis = new FileInputStream(file);
            final UniversalDetector detector = new UniversalDetector(null);
            handleData(fis, detector);
            encoding = getEncoding(detector);
            detector.reset();
            fis.close();
        } catch (IOException e) {
            
        }
        return encoding;

    }

    private String getEncoding(UniversalDetector detector) {
        if (detector.isDone()) {
            return detector.getDetectedCharset();
        }
        return detector.getDetectedCharset();
    }

    private void handleData(FileInputStream fis, UniversalDetector detector) throws IOException {
        int nread;
        final byte[] buf = new byte[4096];
        while ((nread = fis.read(buf)) > 0 && !detector.isDone()) {
            detector.handleData(buf, 0, nread);
        }
        detector.dataEnd();
    }


}
